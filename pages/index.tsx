// @ts-nocheck

import Head from 'next/head';
import Image from 'next/image';
import { Inter } from '@next/font/google';
import styles from '@/styles/Home.module.css';
import useSWR from 'swr';
import { Doughnut } from 'react-chartjs-2';
import { useEffect, useState } from 'react';

import {
	Chart as ChartJS,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	ArcElement,
	Tooltip,
	Legend,
} from 'chart.js';
import { Bar } from 'react-chartjs-2';

ChartJS.register(
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	ArcElement,
	Tooltip,
	Legend
);

export async function getServerSideProps() {
	const res = await fetch('https://www.contrahacker.com/api/example-data');
	const data = await res.json();

	return {
		props: {
			data,
		},
	};
}

const inter = Inter({ subsets: ['latin'] });

// https://www.contrahacker.com/api/example-data
// https://personal-website-contrahacker.vercel.app/api/example-data
const fetcher = async () => {
	const res = await fetch(
		'https://personal-website-contrahacker.vercel.app/api/example-data'
	);
	const data = await res.json();
	// console.log('try', data);
	return data;
};

const genChart = (data) => {
	let final = data.data.reduce((acc, curr) => {
		if (acc[curr.sector]) {
			acc[curr.sector] += curr.price;
		} else {
			acc[curr.sector] = curr.price;
		}
		return acc;
	}, {});

	let final1 = data.data.map((ele) => {
		return {
			ticker: ele.ticker,
			price: ele.price,
		};
	});

	const dn = {
		labels: Object.keys(final),
		datasets: [
			{
				label: 'count',
				data: Object.values(final),
				backgroundColor: ['orange', 'blue', 'green', 'red'],
				borderWidth: 0,
			},
		],
	};
	const bar = {
		labels: final1.map((ele) => ele.ticker),
		datasets: [
			{
				label: '',
				data: final1.map((ele) => ele.price),
				backgroundColor: ['orange', 'blue', 'green', 'red'],
			},
		],
	};
	return [dn, bar];
};

export default function Home({ sdata }) {
	let err = false;
	const { data, error } = useSWR('dashboard', fetcher, {
		initialData: sdata,
	});

	if (data) {
		// console.log('comp', data);
		if (data.hasOwnProperty('error')) {
			err = true;
		} else {
			var [dn, bar] = genChart(data);
		}
	}
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{/* {
        data.data?.length === 0 ? (
          <div>Loading...</div>
        ) : (
          data.data.map((ele:any) => (
            <>
              <p>
                {ele.id +"\t"}
                {ele.ticker+"\t" }
                {ele.sector+"\t" }
                {ele.price+"\t" }
              </p>
            </>
          ))
        )
      }
      {data.dataset} */}

			<div className={styles.body}>
				<main className={styles.main}>
					{!data ? (
						<h1>Loading...{data?.error}</h1>
					) : data?.error ? (
						<h1>{data.error.message}</h1>
					) : (
						<>
							<div className={styles.dn}>
								<Doughnut
									data={dn}
									options={{
										responsive: true,
										plugins: {
											legend: {
												display: false,
											},
											title: {
												display: true,
												text: 'Portfolio Distribution into Sectors',
												position: 'bottom',
											},
										},
									}}
								/>
							</div>

							<div className={styles.bar}>
								<Bar
									data={bar}
									options={{
										maintainAspectRatio: false,
										responsive: true,
										plugins: {
											legend: {
												display: false,
											},
											title: {
												display: true,
												text: 'Price (USD)',
												position: 'bottom',
											},
										},
									}}
								/>
							</div>
						</>
					)}
				</main>
			</div>
		</>
	);
}
